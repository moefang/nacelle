{"name":"Nacelle","tagline":"A simple lightweight microframework built on top of webapp2/jinja for Google AppEngine","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Nacelle Microframework\r\n======================\r\n\r\nNacelle is a simple python microframework for Google Appengine designed to stay out of your way and let you get to the fun stuff as quickly as possible.\r\n\r\nWebapp2 is awesome, but doesn't quite do enough and you usually end up spending substantial time building scaffolding.  Django's fantastic but sometimes feels like it tries to do too much and has gotten too heavy for my typical use case.  Nacelle's designed to fill this gap, all the beauty and simplicity of webapp2 with a heavy dose of inspiration from Django.\r\n\r\nNacelle includes the following libraries (see lib folder for license details):\r\n\r\n    - Jinja2 for templating support\r\n    - WTForms for djangoforms style forms support\r\n    - Markdown for markdown parsing support\r\n    - simplejson for json parsing/encoding\r\n    - unidecode for extra unicode support\r\n    - raven for support for reporting errors to a sentry server\r\n\r\nOne of the main goals of Nacelle is to encourage code reuse by enabling pluggable apps that can be reused across multiple projects.  Nacelle makes very few assumptions about your code and only requires that you do one or two things to use it.\r\n\r\nNacelle includes some extra features (for which I'll add documentation later) like base models and handlers which incorporate full version control.  And some convenient decorators to allow fr things like derived properties on your models.\r\n\r\nInstructions:\r\n-------------\r\n\r\nClone this repository\r\n    git@github.com:paddycarey/nacelle.git\r\n\r\nCopy the `nacelle` folder, `settings.py.example` and `app.yaml.example` to your project's root directory.  Rename and edit the .example files appropriately, the only required setting in settings.py is `ROUTES`, which should be a list of routes modules for any apps you wish to activate.\r\n\r\n    `Examples to follow`\r\n\r\nModels:\r\n-------\r\n\r\nNacelle provides a JSONModel which allows storage of arbitrary JSON objects in the appengine datastore.  It provides 2-way conversion of JSON objects to suitable datastore properties which can then be accessed in the normal ways using the appengine datastore API.\r\n\r\n    >>> from nacelle.models import JSONModel\r\n\r\n    >>> j = JSONModel()\r\n    >>> j.json = {'test_str':'some string', 'test_int':123, 'test_date':\"2007-01-25T12:00:00Z\", 'test_geopt':{'lat':4.567, 'lon':7.432}, 'test_list':['key:ahRkZXZ-d2Fja3dhY2stbmFjZWxsZXIPCxIJSlNPTk1vZGVsGAEM','key:ahRkZXZ-d2Fja3dhY2stbmFjZWxsZXIPCxIJSlNPTk1vZGVsGAIM', 'key:ahRkZXZ-d2Fja3dhY2stbmFjZWxsZXIPCxIJSlNPTk1vZGVsGAMM']}\r\n    >>> j.put()\r\n\r\n    >>> db.to_dict(j)\r\n    {'test_geopt': datastore_types.GeoPt(4.567, 7.432), 'test_str': 'some string', 'test_list': [datastore_types.Key.from_path(u'JSONModel', 1L, _app=u'dev~wackwack-nacelle'), datastore_types.Key.from_path(u'JSONModel', 2L, _app=u'dev~wackwack-nacelle'), datastore_types.Key.from_path(u'JSONModel', 3L, _app=u'dev~wackwack-nacelle')], 'test_date': datetime.datetime(2007, 1, 25, 12, 0, tzinfo=<iso8601.iso8601.Utc object at 0x98d7a6c>), 'test_int': 123}\r\n\r\n\r\nOther than that, you get a pretty standard appengine python environment, all familiar and cuddly, what's not to love?\r\n\r\nAll original code is ISC licensed, included libraries may have a different license which is indicated in their source.\r\n\r\nCopyright (c) 2012, Patrick Carey\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n"}